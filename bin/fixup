#! /usr/bin/env python

import pathlib,pprint,itertools,argparse
import re
import sys

verbose = False
testrun = False
pattern = ""
replace = ""
rootdir = "."

parser = argparse.ArgumentParser(description="Apply python regular expression replacement to a tree of files")
parser.add_argument("-v","--verbose",           help="verbose output",action="count")
parser.add_argument("-t","--testrun",           help="don't actually change anything.",action="store_true")
group = parser.add_mutually_exclusive_group()
group.add_argument("-l","--lfunc",             help='expression appended to "lambda m: ( {} )" and evaluated',action='store_true')
group.add_argument("-f","--dfunc",             help='expression attached to "def func(m):" and evaluated',action='store_true')
group.add_argument("-s","--simple",            help="use string replacement, not regex replacement.",action="store_true")
parser.add_argument("-g","--glob",              help="globs of files to modify.",nargs="+",default=["*","**/*"])
parser.add_argument("-x","--exclude",           help="globs of files to ignore",nargs="+",default=[])
parser.add_argument("-p","--pattern",           help="thing to replace.",type=str)
parser.add_argument("-r","--replace",           help="thing to use instead.",type=str)
parser.add_argument("-d","--dir","--directory", help="root of try to search",default=pathlib.Path('.'),type=pathlib.Path)

args = parser.parse_args()

verbose = args.verbose
testrun = args.testrun
if verbose > 2: 
    print ("args: ",sys.argv)
    if testrun: print("TESTRUN")

if not args.pattern or not args.replace: sys.exit(-1)
pattern = re.compile(args.pattern) if ( not args.simple ) else args.pattern
replace = args.replace
if args.lfunc:
    env = {}
    replace = eval("lambda m: ({})".format(args.replace),env)
elif args.dfunc:
    env = {}
    indentation = re.compile("^",re.MULTILINE)
    source = "def func(m):\n" + indentation.sub('  ',replace)
    print(source)
    exec(source,env)
    try:
        replace = env['func']
    except Exception as e:
        print("failed to find 'func' in defined replacement function, {}",e.message)
        print(env)
        exit(-1)
files = itertools.chain(*(args.dir.glob(g) for g in args.glob))
if args.exclude: files = itertools.ifilter((lambda x:not any(x.match(e) for e in args.exclude)),files)
for _file in files:
    if verbose > 2:
        print _file
    if '.git' in _file.as_posix().split('/'):
        if verbose > 2: print("skipping ",_file.as_posix())
        continue
    try:
        with open(_file.as_posix(),'r') as f: data = f.read()
        if verbose > 0:
            try:
                beg = -1
                end = -1
                for m in pattern.finditer(data):
                    _beg = data.rfind('\n',0,m.start())
                    _end = data.find('\n',m.end())
                    if _beg < end: continue
                    print('    ... '+data[_beg:_end].strip()+' ... \n==> ... ' + pattern.sub(replace,data[_beg:_end]).strip()+" ...\n")
                    beg=_beg
                    end=_end
            except Exception as e: 
                print("Exception in debug print attempt: {}".format(pprint.pformat(e)))
                continue
        try:
            data1 = pattern.sub(replace,data)
            if data!=data1 and not testrun: 
                if verbose > 1:
                    print(_file)
                with open(_file.as_posix(),'w') as f:
                    f.write(data1)
        except Exception as e:print("exception in actual replacement: {}".format(pprint.pformat(e)))
    except Exception as e:  pprint.pprint(e)
